{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPb2W6dqnMP+xJ+s+2ocIuL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2303a52483/23CSBTB44/blob/main/2303A52483(Assignment-3)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "G1bsd6x2NFQj",
        "outputId": "897596f5-1b07-4176-ed8d-4c284162088c"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-12-79398e5993bb>, line 11)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-12-79398e5993bb>\"\u001b[0;36m, line \u001b[0;32m11\u001b[0m\n\u001b[0;31m    queue.extend(neighbour from neighbour in graph(vertex)if neighbour not in visited)\u001b[0m\n\u001b[0m                           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ],
      "source": [
        "from collections import deque\n",
        "def bfs(graph, start):\n",
        "  visited=set()\n",
        "  queue=deque([start])\n",
        "  result=[]\n",
        "  while queue:\n",
        "    node=queue.popleft()\n",
        "    if vertex not in visited:\n",
        "        visited.add(vertex)\n",
        "        result.append(vertexfrom)\n",
        "        queue.extend(neighbour from neighbour in graph[vertex)if neighbour not in visited)\n",
        "    return result\n",
        "    if__name__=='__main__':\n",
        "      graph={\n",
        "          '0':['1','3','4'],\n",
        "          '1':['0','2','3'],\n",
        "          '3':['0','4'],\n",
        "          '2':['1'],\n",
        "          '4':['2','5'],\n",
        "\n",
        "          '5':['2','4']\n",
        "      }\n",
        "      start node='0'\n",
        "      print(\"BFS traversal starting from node (start_node):(bfs(graph,start_node))\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}